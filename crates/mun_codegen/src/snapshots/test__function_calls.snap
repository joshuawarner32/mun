---
source: crates/mun_codegen/src/test.rs
expression: "fn add_impl(a:i32, b:i32) -> i32 {\n    a+b\n}\n\nfn add(a:i32, b:i32) -> i32 {\n  add_impl(a,b)\n}\n\npub fn test() -> i32 {\n  add(4,5)\n  add_impl(4,5)\n  add(4,5)\n}"
---
; == FILE IR =====================================
; ModuleID = 'main.mun'
source_filename = "main.mun"

%DispatchTable.0 = type { i32 (i32, i32)*, i32 (i32, i32)* }
%struct.MunTypeInfo.1 = type { [16 x i8], i8 addrspace(4)*, i32, i8, i8 }

@dispatchTable = external global %DispatchTable.0
@global_type_table = external global [1 x %struct.MunTypeInfo.1 addrspace(4)*]

define i32 @add_impl(i32 %0, i32 %1) {
body:
  %add = add i32 %0, %1
  ret i32 %add
}

define i32 @add(i32 %0, i32 %1) {
body:
  %add_impl_ptr = load i32 (i32, i32)*, i32 (i32, i32)** getelementptr inbounds (%DispatchTable.0, %DispatchTable.0* @dispatchTable, i32 0, i32 1)
  %add_impl = call i32 %add_impl_ptr(i32 %0, i32 %1)
  ret i32 %add_impl
}

define i32 @test() {
body:
  %add_ptr = load i32 (i32, i32)*, i32 (i32, i32)** getelementptr inbounds (%DispatchTable.0, %DispatchTable.0* @dispatchTable, i32 0, i32 0)
  %add = call i32 %add_ptr(i32 4, i32 5)
  %add_impl_ptr = load i32 (i32, i32)*, i32 (i32, i32)** getelementptr inbounds (%DispatchTable.0, %DispatchTable.0* @dispatchTable, i32 0, i32 1)
  %add_impl = call i32 %add_impl_ptr(i32 4, i32 5)
  %add_ptr1 = load i32 (i32, i32)*, i32 (i32, i32)** getelementptr inbounds (%DispatchTable.0, %DispatchTable.0* @dispatchTable, i32 0, i32 0)
  %add2 = call i32 %add_ptr1(i32 4, i32 5)
  ret i32 %add2
}


; == GROUP IR ====================================
; ModuleID = 'group_name'
source_filename = "group_name"

%DispatchTable = type { i32 (i32, i32)*, i32 (i32, i32)* }
%struct.MunTypeInfo = type { [16 x i8], i8 addrspace(4)*, i32, i8, i8 }

@dispatchTable = global %DispatchTable { i32 (i32, i32)* @add, i32 (i32, i32)* @add_impl }
@"type_info::<core::i32>::name" = private unnamed_addr constant [10 x i8] c"core::i32\00"
@"type_info::<core::i32>" = private unnamed_addr constant %struct.MunTypeInfo { [16 x i8] c"\17yzt\19\D62\17\D25\95C\17\88[\FA", [10 x i8]* @"type_info::<core::i32>::name", i32 32, i8 4, i8 0 }
@global_type_table = global [1 x %struct.MunTypeInfo addrspace(4)*] [%struct.MunTypeInfo addrspace(4)* @"type_info::<core::i32>"]

declare i32 @add(i32, i32)

declare i32 @add_impl(i32, i32)

