---
source: crates/mun_codegen/src/test.rs
expression: "pub fn assign(a: u16, b: u16) -> u16 {\n    a = b;\n    a\n}\npub fn assign_add(a: u16, b: u16) -> u16 {\n    a += b;\n    a\n}\npub fn assign_subtract(a: u16, b: u16) -> u16 {\n    a -= b;\n    a\n}\npub fn assign_multiply(a: u16, b: u16) -> u16 {\n    a *= b;\n    a\n}\npub fn assign_divide(a: u16, b: u16) -> u16 {\n    a /= b;\n    a\n}\npub fn assign_remainder(a: u16, b: u16) -> u16 {\n    a %= b;\n    a\n}"
---
; == FILE IR =====================================
; ModuleID = 'main.mun'
source_filename = "main.mun"

%struct.MunTypeInfo.1 = type { [16 x i8], i8 addrspace(4)*, i32, i8, i8 }

@global_type_table = external global [1 x %struct.MunTypeInfo.1 addrspace(4)*]

define i16 @assign(i16 %0, i16 %1) {
body:
  ret i16 %1
}

define i16 @assign_add(i16 %0, i16 %1) {
body:
  %add = add i16 %0, %1
  ret i16 %add
}

define i16 @assign_subtract(i16 %0, i16 %1) {
body:
  %sub = sub i16 %0, %1
  ret i16 %sub
}

define i16 @assign_multiply(i16 %0, i16 %1) {
body:
  %mul = mul i16 %0, %1
  ret i16 %mul
}

define i16 @assign_divide(i16 %0, i16 %1) {
body:
  %div = udiv i16 %0, %1
  ret i16 %div
}

define i16 @assign_remainder(i16 %0, i16 %1) {
body:
  %rem = urem i16 %0, %1
  ret i16 %rem
}


; == GROUP IR ====================================
; ModuleID = 'group_name'
source_filename = "group_name"

%struct.MunTypeInfo = type { [16 x i8], i8 addrspace(4)*, i32, i8, i8 }

@"type_info::<core::u16>::name" = private unnamed_addr constant [10 x i8] c"core::u16\00"
@"type_info::<core::u16>" = private unnamed_addr constant %struct.MunTypeInfo { [16 x i8] c"0\01\BC\BBK\E0\F2\7F&l\01\CD|q\F2\B3", [10 x i8]* @"type_info::<core::u16>::name", i32 16, i8 2, i8 0 }
@global_type_table = global [1 x %struct.MunTypeInfo addrspace(4)*] [%struct.MunTypeInfo addrspace(4)* @"type_info::<core::u16>"]

