---
source: crates/mun_codegen/src/test.rs
expression: "pub fn add(a: i32, b: i32) -> i32 { a + b }\npub fn subtract(a: i32, b: i32) -> i32 { a - b }\npub fn multiply(a: i32, b: i32) -> i32 { a * b }\npub fn divide(a: i32, b: i32) -> i32 { a / b }\npub fn remainder(a: i32, b: i32) -> i32 { a % b }"
---
; == FILE IR =====================================
; ModuleID = 'main.mun'
source_filename = "main.mun"

%struct.MunTypeInfo.1 = type { [16 x i8], i8 addrspace(4)*, i32, i8, i8 }

@global_type_table = external global [1 x %struct.MunTypeInfo.1 addrspace(4)*]

define i32 @add(i32 %0, i32 %1) {
body:
  %add = add i32 %0, %1
  ret i32 %add
}

define i32 @subtract(i32 %0, i32 %1) {
body:
  %sub = sub i32 %0, %1
  ret i32 %sub
}

define i32 @multiply(i32 %0, i32 %1) {
body:
  %mul = mul i32 %0, %1
  ret i32 %mul
}

define i32 @divide(i32 %0, i32 %1) {
body:
  %div = sdiv i32 %0, %1
  ret i32 %div
}

define i32 @remainder(i32 %0, i32 %1) {
body:
  %rem = srem i32 %0, %1
  ret i32 %rem
}


; == GROUP IR ====================================
; ModuleID = 'group_name'
source_filename = "group_name"

%struct.MunTypeInfo = type { [16 x i8], i8 addrspace(4)*, i32, i8, i8 }

@"type_info::<core::i32>::name" = private unnamed_addr constant [10 x i8] c"core::i32\00"
@"type_info::<core::i32>" = private unnamed_addr constant %struct.MunTypeInfo { [16 x i8] c"\17yzt\19\D62\17\D25\95C\17\88[\FA", [10 x i8]* @"type_info::<core::i32>::name", i32 32, i8 4, i8 0 }
@global_type_table = global [1 x %struct.MunTypeInfo addrspace(4)*] [%struct.MunTypeInfo addrspace(4)* @"type_info::<core::i32>"]

