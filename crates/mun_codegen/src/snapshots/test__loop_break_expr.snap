---
source: crates/mun_codegen/src/test.rs
expression: "pub fn foo(n:i32) -> i32 {\n    loop {\n        if n > 5 {\n            break n;\n        }\n        if n > 10 {\n            break 10;\n        }\n        n += 1;\n    }\n}"
---
; == FILE IR =====================================
; ModuleID = 'main.mun'
source_filename = "main.mun"

%struct.MunTypeInfo = type { [16 x i8], i8 addrspace(4)*, i32, i8, i8 }

@global_type_table = external global [1 x %struct.MunTypeInfo addrspace(4)*]

define i32 @foo(i32 %0) {
body:
  br label %loop

loop:                                             ; preds = %if_merge6, %body
  %n.0 = phi i32 [ %0, %body ], [ %add, %if_merge6 ]
  %greater = icmp sgt i32 %n.0, 5
  br i1 %greater, label %exit, label %if_merge

exit:                                             ; preds = %if_merge, %loop
  %exit8 = phi i32 [ %n.0, %loop ], [ 10, %if_merge ]
  ret i32 %exit8

if_merge:                                         ; preds = %loop
  %greater4 = icmp sgt i32 %n.0, 10
  br i1 %greater4, label %exit, label %if_merge6

if_merge6:                                        ; preds = %if_merge
  %add = add i32 %n.0, 1
  br label %loop
}


; == GROUP IR ====================================
; ModuleID = 'group_name'
source_filename = "group_name"

%struct.MunTypeInfo = type { [16 x i8], i8 addrspace(4)*, i32, i8, i8 }

@"type_info::<core::i32>::name" = private unnamed_addr constant [10 x i8] c"core::i32\00"
@"type_info::<core::i32>" = private unnamed_addr constant %struct.MunTypeInfo { [16 x i8] c"\17yzt\19\D62\17\D25\95C\17\88[\FA", [10 x i8]* @"type_info::<core::i32>::name", i32 32, i8 4, i8 0 }
@global_type_table = global [1 x %struct.MunTypeInfo addrspace(4)*] [%struct.MunTypeInfo addrspace(4)* @"type_info::<core::i32>"]

