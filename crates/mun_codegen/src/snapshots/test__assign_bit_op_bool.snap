---
source: crates/mun_codegen/src/test.rs
expression: "pub fn assign_bitand(a: bool, b: bool) -> bool {\n    a &= b;\n    a\n}\npub fn assign_bitor(a: bool, b: bool) -> bool {\n    a |= b;\n    a\n}\npub fn assign_bitxor(a: bool, b: bool) -> bool {\n    a ^= b;\n    a\n}"
---
; == FILE IR =====================================
; ModuleID = 'main.mun'
source_filename = "main.mun"

%struct.MunTypeInfo.1 = type { [16 x i8], i8 addrspace(4)*, i32, i8, i8 }

@global_type_table = external global [1 x %struct.MunTypeInfo.1 addrspace(4)*]

define i1 @assign_bitand(i1 %0, i1 %1) {
body:
  %bit_and = and i1 %0, %1
  ret i1 %bit_and
}

define i1 @assign_bitor(i1 %0, i1 %1) {
body:
  %bit_or = or i1 %0, %1
  ret i1 %bit_or
}

define i1 @assign_bitxor(i1 %0, i1 %1) {
body:
  %bit_xor = xor i1 %0, %1
  ret i1 %bit_xor
}


; == GROUP IR ====================================
; ModuleID = 'group_name'
source_filename = "group_name"

%struct.MunTypeInfo = type { [16 x i8], i8 addrspace(4)*, i32, i8, i8 }

@"type_info::<core::bool>::name" = private unnamed_addr constant [11 x i8] c"core::bool\00"
@"type_info::<core::bool>" = private unnamed_addr constant %struct.MunTypeInfo { [16 x i8] c"x\82\81m t7\03\CB\F8k\81-;\C9\84", [11 x i8]* @"type_info::<core::bool>::name", i32 1, i8 1, i8 0 }
@global_type_table = global [1 x %struct.MunTypeInfo addrspace(4)*] [%struct.MunTypeInfo addrspace(4)* @"type_info::<core::bool>"]

