---
source: crates/mun_codegen/src/test.rs
expression: "pub fn add(a: i8, b: i8) -> i8 { a + b }\npub fn subtract(a: i8, b: i8) -> i8 { a - b }\npub fn multiply(a: i8, b: i8) -> i8 { a * b }\npub fn divide(a: i8, b: i8) -> i8 { a / b }\npub fn remainder(a: i8, b: i8) -> i8 { a % b }"
---
; == FILE IR =====================================
; ModuleID = 'main.mun'
source_filename = "main.mun"

%struct.MunTypeInfo.1 = type { [16 x i8], i8 addrspace(4)*, i32, i8, i8 }

@global_type_table = external global [1 x %struct.MunTypeInfo.1 addrspace(4)*]

define i8 @add(i8 %0, i8 %1) {
body:
  %add = add i8 %0, %1
  ret i8 %add
}

define i8 @subtract(i8 %0, i8 %1) {
body:
  %sub = sub i8 %0, %1
  ret i8 %sub
}

define i8 @multiply(i8 %0, i8 %1) {
body:
  %mul = mul i8 %0, %1
  ret i8 %mul
}

define i8 @divide(i8 %0, i8 %1) {
body:
  %div = sdiv i8 %0, %1
  ret i8 %div
}

define i8 @remainder(i8 %0, i8 %1) {
body:
  %rem = srem i8 %0, %1
  ret i8 %rem
}


; == GROUP IR ====================================
; ModuleID = 'group_name'
source_filename = "group_name"

%struct.MunTypeInfo = type { [16 x i8], i8 addrspace(4)*, i32, i8, i8 }

@"type_info::<core::i8>::name" = private unnamed_addr constant [9 x i8] c"core::i8\00"
@"type_info::<core::i8>" = private unnamed_addr constant %struct.MunTypeInfo { [16 x i8] c"\EF\C4\B1Z\E7\12\B1\91q\F1\0B\80U\FC\A6\0F", [9 x i8]* @"type_info::<core::i8>::name", i32 8, i8 1, i8 0 }
@global_type_table = global [1 x %struct.MunTypeInfo addrspace(4)*] [%struct.MunTypeInfo addrspace(4)* @"type_info::<core::i8>"]

